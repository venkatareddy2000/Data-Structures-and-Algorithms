package com.venky.practice;

public class CircularLinkedList {
	private Node head;

	private static class Node {
		private int data;
		private Node next;

		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}

	private void insertAtBegin(int value) {
		Node node = new Node(value);
		if (isEmpty()) {
			head = node;
			node.next = head;
		} else {
			node.next = head;
			Node current = head;
			while (current.next != head) {
				current = current.next;
			}
			current.next = node;
			head = node;
		}
	}

	public void insertAtEnd(int value) {
		Node node = new Node(value);
		if (isEmpty()) {
			head = node;
			node.next = head;
		} else {
			Node current = head;
			while (current.next != head) {
				current = current.next;
			}
			current.next = node;
			node.next = head;
			head = node;
		}
	}

	public void insertAtIndex(int index, int value) {
		if (index < 0 || index > getSize()) {
			throw new IndexOutOfBoundsException("Invalid index");
		} else if (index == 0) {
			insertAtBegin(value);
		} else if (index == getSize()) {
			insertAtEnd(value);
		} else {
			Node node = new Node(value);
			Node current = head;
			for (int i = 0; i < index - 1; i++) {
				current = current.next;
			}
			node.next = current.next;
			current.next = node;
		}
	}

	public void deleteAtBegin() {
		if (isEmpty()) {
			throw new RuntimeException("Linked list is empty");
		}

		if (head.next == head) {
			head = null;
		} else {
			Node current = head;
			while (current.next != head) {
				current = current.next;
			}
			current.next = head.next;
			head = head.next;
		}
	}

	public void deleteAtEnd() {
		if (isEmpty()) {
			throw new RuntimeException("Linked list is empty");
		} else if (head.next == head) {
			head = null;
		} else {
			Node current = head;
			while (current.next.next != head) {
				current = current.next;
			}
			current.next = null;
		}
	}

	public void deleteAtIndex(int index) {
		if (index < 0 || index > getSize()) {
			throw new IndexOutOfBoundsException("Invalid index");
		} else if (index == 0) {
			deleteAtBegin();
		} else if (index == getSize()) {
			deleteAtEnd();
		} else {
			Node current = head;
			for (int i = 0; i < index - 1; i++) {
				current = current.next;
			}
			current.next = current.next.next;
		}
	}

	public void reverseLinkedList() {
		Node temp = head;
		Node next = null;
		Node previous = null;
		while (temp != null) {
			next = temp.next;
			temp.next = previous;
			previous = temp;
			temp = next;
		}
		head = previous;
	}

	public boolean isEmpty() {
		return head == null;
	}

	private int getSize() {
		int count = 0;
		Node current = head;
		while (current != null) {
			count++;
			current = current.next;
		}
		return count;
	}

	public void display() {
		Node current = head;
		while (current != null) {
			System.out.print(current.data + " ");
			current = current.next;
		}
		System.out.println();
	}

	public static void main(String[] args) {
		CircularLinkedList circularLinkedList = new CircularLinkedList();
	}

}
